<?php
declare(strict_types=1);

namespace Jsys\strings\Test;

use jsys\types\strings\Text;
use PHPUnit\Framework\TestCase;

class TextTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * Test string is empty or not
     *
     * @param string $testString
     * @param bool $expected
     * @dataProvider dataProviderForEmptyStringTest
     */
    public function test_check_string_is_empty_or_not(string $testString, bool $expected)
    {
        $text = new Text($testString);
        $actual = $text->isEmpty();
        $this->assertEquals($actual, $expected);
    }

    /**
     * @return array
     */
    public function dataProviderForEmptyStringTest(): array
    {
        return [
            ['', true],
            ['nonEmpty', false],
            ['has space', false],
            ['NoSpace', false],
            ['     ', false],
            ['symb@ls', false],
            ['with 123 number', false],
        ];
    }

    /**
     * Test detect string contain space or not
     *
     * @param string $testString
     * @param bool $expected
     * @dataProvider dataProviderForDetectingSpaceStringTest
     */
    public function test_can_detect_space_in_the_string(string $testString, bool $expected)
    {
        $text = new Text($testString);
        $actual = $text->hasSpace();
        $this->assertEquals($actual, $expected);
    }

    /**
     * @return array
     */
    public function dataProviderForDetectingSpaceStringTest(): array
    {
        return [
            ['', false],
            ['nonEmpty', false],
            ['has space', true],
            ['NoSpace', false],
            ['     ', false],
            ['symb@ls', false],
            ['with 123 number', true],
        ];
    }


    /**
     * Test check the string is completely spaces or not
     *
     * @param string $testString
     * @param bool $expected
     * @dataProvider dataProviderForCompleteSpacesStringTest
     */
    public function test_can_check_if_a_string_is_completely_spaces_or_not(string $testString, bool $expected)
    {
        $text = new Text($testString);
        $actual = $text->isSpace();
        $this->assertEquals($actual, $expected);
    }

    /**
     * @return array
     */
    public function dataProviderForCompleteSpacesStringTest(): array
    {
        return [
            ['', false],
            ['nonEmpty', false],
            ['has space', false],
            ['NoSpace', false],
            ['     ', true],
            ['symb@ls', false],
            ['with 123 number', false],
        ];
    }


    /**
     * Test return the length of given string
     *
     * @param string $testString
     * @param int $expected
     * @dataProvider dataProviderForStringLengthTest
     */
    public function test_can_return_length_of_string(string $testString, int $expected)
    {
        $text = new Text($testString);
        $actual = $text->length();
        $this->assertEquals($actual, $expected);
    }

    /**
     * @return array
     */
    public function dataProviderForStringLengthTest(): array
    {
        return [
            ['', 0],
            ['nonEmpty', 8],
            ['has space', 9],
            ['NoSpace', 7],
            ['     ', 5],
            ['symb@ls', 7],
            ['with 123 number', 15],
        ];
    }

    /**
     * Test return value of given string
     *
     * @param string $testString
     * @param string $expected
     * @dataProvider dataProviderForStringValueTest
     */
    public function test_can_return_value_of_given_string(string $testString, string $expected)
    {
        $text = new Text($testString);
        $actual = $text->value();
        $this->assertEquals($actual, $expected);
    }

    /**
     * @return array
     */
    public function dataProviderForStringValueTest(): array
    {
        return [
            ['', ''],
            ['nonEmpty', 'nonEmpty'],
            ['has space', 'has space'],
            ['NoSpace', 'NoSpace'],
            ['     ', '     '],
            ['symb@ls', 'symb@ls'],
            ['with 123 number', 'with 123 number']
        ];
    }

    public function tearDown(): void
    {

    }
}

?>